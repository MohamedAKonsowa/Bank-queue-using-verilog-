module clock_divider (
  input wire clk,     // input clock signal
  input wire reset,   // synchronous reset
  output reg CLK100Hz // output 100 Hz clock signal
);

  reg [6:0] count;    // counter for dividing the clock

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      count <= 0;     // reset the counter to zero
      CLK100Hz <= 0;  // set the output to zero
    end else begin
      count <= count + 1;    // increment the counter
      if (count == 499999) begin
        count <= 0;          // reset the counter
        CLK100Hz <= ~CLK100Hz; // toggle the output
      end
    end
  end

endmodule


module clk_div_tb;
  // Declare inputs and outputs
  reg clk;
  reg reset;
  wire CLK100Hz;

  // Instantiate the module being tested
  clock_divider uut (
    .clk(clk),
    .reset(reset),
    .CLK100Hz(CLK100Hz)
  );

  // Generate a 10 MHz clock signal
  reg [31:0] count = 0;
  always #5 clk = count[31];
  always #1 count = count + 1;

  // Reset the divider for the first 50 ns
  initial begin
    reset = 1;
    #50 reset = 0;
  end

  // Verify that the output has a frequency of 100 Hz
  initial begin
    repeat (100000) @(posedge CLK100Hz); // Wait for 1 second
    $display("100 Hz clock test complete");
    
  end
endmodule


module binary_to_bcd( input clk,
  input [7:0] binary_num,
  output reg [7:0] bcd_num
);

always @(posedge clk) begin
  case (binary_num)
    8'b00000: bcd_num = 8'b0000_0000;
    8'b00001: bcd_num = 8'b0000_0001;
    8'b00010: bcd_num = 8'b0000_0010;
    8'b00011: bcd_num = 8'b0000_0011;
    8'b00100: bcd_num = 8'b0000_0100;
    8'b00101: bcd_num = 8'b0000_0101;
    8'b00110: bcd_num = 8'b0000_0110;
    8'b00111: bcd_num = 8'b0000_0111;
    8'b01000: bcd_num = 8'b0000_1000;
    8'b01001: bcd_num = 8'b0000_1001;
    8'b01010: bcd_num = 8'b0001_0000;
    8'b01011: bcd_num = 8'b0001_0001;
    8'b01100: bcd_num = 8'b0001_0010;
    8'b01101: bcd_num = 8'b0001_0011;
    8'b01110: bcd_num = 8'b0001_0100;
    8'b01111: bcd_num = 8'b0001_0101;
    8'b10000: bcd_num = 8'b0001_0110;
    8'b10001: bcd_num = 8'b0001_0111;
    8'b10010: bcd_num = 8'b0001_1000;
    8'b10011: bcd_num = 8'b0001_1001;
    8'b10100: bcd_num = 8'b0010_0000;
    8'b10101: bcd_num = 8'b0010_0001;
    8'b10110: bcd_num = 8'b0010_0010;
    8'b10111: bcd_num = 8'b0010_0011;
    8'b11000: bcd_num = 8'b0010_0100;
    default: bcd_num = 8'b00000000;

  endcase
end

endmodule

module BCD_TB;


reg [7:0] binary_num;
wire [7:0] bcd_num;
reg clk = 0;
always #5 clk = ~clk;

binary_to_bcd BCD(clk,binary_num,bcd_num);

initial begin
#10 binary_num = 3;
#10 binary_num = 11;
end


endmodule




module Rom(input clk, input [7:0] address,
           output reg [7:0] data_out);
           
    always @(posedge clk) begin
        case(address)
            8'b00010000: data_out = 8'b00000000;
            8'b00010001: data_out = 8'b00000011;
            8'b00010010: data_out = 8'b00000110;
            8'b00010011: data_out = 8'b00001001;
            8'b00010100: data_out = 8'b00001100;
            8'b00010101: data_out = 8'b00001111;
            8'b00010110: data_out = 8'b00010010;
            8'b00010111: data_out = 8'b00010101;
            8'b00100000: data_out = 8'b00000000;
            8'b00100001: data_out = 8'b00000011;
            8'b00100010: data_out = 8'b00000100;
            8'b00100011: data_out = 8'b00000110;
            8'b00100100: data_out = 8'b00000111;
            8'b00100101: data_out = 8'b00001001;
            8'b00100110: data_out = 8'b00001010;
            8'b00100111: data_out = 8'b00001100;
            8'b00110000: data_out = 8'b00000000;
            8'b00110001: data_out = 8'b00000011;
            8'b00110010: data_out = 8'b00000100;
            8'b00110011: data_out = 8'b00000101;
            8'b00110100: data_out = 8'b00000110;
            8'b00110101: data_out = 8'b00000111;
            8'b00110110: data_out = 8'b00001000;
            8'b00110111: data_out = 8'b00001001;
            default: data_out = 8'b00000000;
        endcase
    end
    
endmodule




module decoder_7seg(
  input clk, input reg[3:0] InputNumber , output [6:0]OutputSegment
);
reg[6:0] outputreg;
always@(posedge clk)
begin
  case(InputNumber)
    0 : outputreg = 7'b1111110;
    1 : outputreg <= 7'b0110000;
    2 : outputreg <= 7'b1101101;
    3 : outputreg <= 7'b1111001;
    4 : outputreg <= 7'b0110011;
    5 : outputreg <= 7'b1011011;
    6 : outputreg <= 7'b1011111;
    7 : outputreg <= 7'b1110000;
    8 : outputreg <= 7'b1111111;
    9 : outputreg <= 7'b1111011;
    default : outputreg <= 7'b1001001;
  endcase
end

assign OutputSegment = outputreg ;
endmodule





module decoder_7seg_tb;
reg[3:0] Number;
wire [6:0] segment;
reg clk;
always #5 clk = ~clk;
decoder_7seg decoder (clk, Number , segment);
initial
begin
  Number = 1 ;
  #10 Number =  2 ;
  #10 Number =  3 ;
  #10 Number =  4 ;
  #10 Number =  5 ;
  #10 Number =  6 ;
  #10 Number =  7 ;
  #10 Number =  8 ;
  #10 Number =  9 ;
end
endmodule









module FSM(clk, reset, state, pcount, in, out, full, empty);
input clk, reset, in, out;
input [2:0] pcount;
output reg [1:0] state;
output reg full, empty;
parameter 	s0 = 2'b00,
		s1 = 2'b01,
		s2 = 2'b10,
		s3 = 2'b11;

always @(posedge clk or posedge reset)

begin
if(reset)
begin
state = 0;
empty = 1;
full = 0;
end
else
begin


case(state)
s0: 	if(in == 1 && out == 0)
		begin
			state = s1;
			empty = 0;
			full = 0;
		end

s1: 	if(in == 1 && out == 0 && pcount == 3'b110)
		begin
			state = s3;
			full = 1;
			empty = 0;
		end
	else if(in == 0 && out == 1)
		begin
			state = s2;
			full = 0;
			empty = 0;
		end
	else if(in == 1 && out == 0 && pcount != 3'b110)
		begin
			state = s1;
			full = 0;
			empty = 0;
		end

s2:	if(in == 1 && out == 0)
		begin
			state = s1;
			full = 0;
			empty = 0;
		end
	else if(in == 0 && out == 1 && pcount != 3'b001)
		begin
			state = s2;
			full = 0;
			empty = 0;
		end
	else if(in == 0 && out == 1 && pcount == 3'b001)
		begin
			state = s0;
			full = 0;
			empty = 1;
		end
s3:	if(in == 0 && out == 1)
		begin
			state = s2;
			full = 0;
			empty = 0;
		end
endcase 



end

end


endmodule











module FSM_tb;

  // Instantiate the FSM module
  reg clk, reset, in, out;
  reg [2:0] pcount;
  wire [1:0] state;
  wire full, empty;
  FSM dut(clk, reset, state, pcount, in, out, full, empty);

  // Clock generation
  always #5 clk = ~clk;

  // Initialize inputs
  initial begin
    clk = 0;
    reset = 1;
    in = 0;
    out = 0;
    pcount = 0;
    #10 reset = 0;
  end

  // Provide stimulus to the FSM
  always #5 begin
    // Test case 1: Input and output both zero
    in = 0;
    out = 0;
    pcount = 0;
    #10;
    $display("Test case 1: state=%b, full=%b, empty=%b", state, full, empty);

    // Test case 2: Input one, output zero
    in = 1;
    out = 0;
    pcount = 0;
    #10;
    $display("Test case 2: state=%b, full=%b, empty=%b", state, full, empty);

    // Test case 3: Input one, output zero, pcount = 6
    in = 1;
    out = 0;
    pcount = 3'b110;
    #10;
    $display("Test case 3: state=%b, full=%b, empty=%b", state, full, empty);

    // Test case 4: Input zero, output one, pcount = 6
    in = 0;
    out = 1;
    pcount = 3'b110;
    #10;
    $display("Test case 4: state=%b, full=%b, empty=%b", state, full, empty);

    // Test case 5: Input one, output zero, pcount = 2
    in = 1;
    out = 0;
    pcount = 3'b010;
    #10;
    $display("Test case 5: state=%b, full=%b, empty=%b", state, full, empty);

    // Test case 6: Input zero, output one, pcount = 2
    in = 0;
    out = 1;
    pcount = 3'b010;
    #10;
    $display("Test case 6: state=%b, full=%b, empty=%b", state, full, empty);

    // Test case 7: Input zero, output one, pcount = 1
    in = 0;
    out = 1;
    pcount = 3'b001;
    #10;
    $display("Test case 7: state=%b, full=%b, empty=%b", state, full, empty);

    // Test case 8: Input one, output zero, pcount = 1
    in = 1;
    out = 0;
    pcount = 3'b001;
    #10;
    $display("Test case 8: state=%b, full=%b, empty=%b", state, full, empty);
  end

endmodule





module up_down_counter (
  input clk, 
  input reset, 
  input in, 
  input out,
  output reg [2:0] pcount
);

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      pcount <= 3'b000;
    end else if (in && (pcount < 3'b111)) begin
      pcount <= pcount + 1;
    end else if (out && (pcount > 3'b000)) begin
      pcount <= pcount - 1;
    end
  end

endmodule





module Up_DownTB;
  // Inputs
  reg clk = 0;
  reg reset = 1;
  reg in = 0;
  reg out = 0;

  // Outputs
  wire [2:0] pcount;
  
  // Instantiate the DUT
  up_down_counter dut(clk, reset, in, out, pcount);

  // Clock generation
  always #5 clk = ~clk;

  // Initialize inputs and test cases
  initial begin
    reset = 1;
    #10;
    reset = 0;
    #10 in = 0; out = 0; $display("Test case 1: pcount=%b", pcount);
    #10 in = 1; out = 0; #5 $display("Test case 2: pcount=%b", pcount);
    #10 in = 1; out = 0; #5 $display("Test case 3: pcount=%b", pcount);
    #10 in = 0; out = 1; #5 $display("Test case 4: pcount=%b", pcount);
    #10 in = 0; out = 1; #5 $display("Test case 5: pcount=%b", pcount);
    #10 in = 0; out = 1; #5 $display("Test case 6: pcount=%b", pcount);
    #10 in = 0; out = 1; #5 $display("Test case 7: pcount=%b", pcount);
    #10 $finish;
  end

endmodule




module abqm (
  input clk, 
  input reset, 
  input in, 
  input out,
  input [1:0]tcount,
  output wire Full_flag, 
  output wire Empty_flag,
  output wire [6:0]OutputSegmentRight,
  output wire [6:0]OutputSegmentLeft
,output wire [2:0]pcount
,output wire [1:0]state
,output wire [3:0] address1
,output wire [3:0] address2
,output wire [7:0] Wait_Time
,output wire [7:0] BCD
);

  

  clock_divider divider(clk,reset,CLK100Hz);
  
  up_down_counter counter_inst ( clk, reset, in, out, pcount);
  
  FSM fsm_inst (
    .clk(clk),
    .reset(reset),
    .in(in),
    .out(out),
    .pcount(pcount),
    .state(state),
    .full(Full_flag),
    .empty(Empty_flag)
  );
  assign address1 = {2'b00, tcount};
  assign address2 = {1'b0, pcount};

  Rom rom_inst(clk, {address1,address2}, Wait_Time);
  binary_to_bcd bcd_init(clk, Wait_Time, BCD);

  
  decoder_7seg segRight(clk,BCD[3:0], OutputSegmentRight);
  decoder_7seg segLeft(clk, BCD[7:4], OutputSegmentLeft);




endmodule


module abqm_tb;

  reg clk = 0;
  reg reset = 0;
  reg in = 0;
  reg out = 0;
  reg [1:0] tcount = 1;
  
  // Outputs
  wire Full_flag;
  wire Empty_flag;
  wire [6:0] OutputSegmentRight;
  wire [6:0] OutputSegmentLeft;
wire [2:0]pcount2;
wire [1:0]state2;
wire [3:0] address1 ; 
wire [3:0] address2 ; 
  wire [7:0] Wait_Time ;
  wire [7:0] BCD ;

abqm uut (
    .clk(clk),
    .reset(reset),
    .in(in),
    .out(out),
    .tcount(tcount),
    .Full_flag(Full_flag),
    .Empty_flag(Empty_flag),
    .OutputSegmentRight(OutputSegmentRight),
    .OutputSegmentLeft(OutputSegmentLeft)
,.pcount(pcount2)
,.state(state2)
,.address1(address1)
,.address2(address2)
,.Wait_Time(Wait_Time)
,.BCD(BCD)
  );

always #5 clk = ~clk;
initial
begin
#10 reset = 1;
#10 reset = 0;
#10 in = 1;out = 0; tcount = 1;
#10 in = 1;out = 0; tcount = 1;
#10 in = 1;out = 0; tcount = 1;
#10 in = 1;out = 0; tcount = 1;
#10 in = 1;out = 0; tcount = 1;
#10 in = 1;out = 0; tcount = 1;
#10 in = 1;out = 0; tcount = 1;

#10 in = 0;out = 1; tcount = 1;
#10 in = 0;out = 1; tcount = 1;
#10 in = 0;out = 1; tcount = 1;
#10 in = 0;out = 1; tcount = 1;
#10 in = 0;out = 1; tcount = 1;
end

endmodule




