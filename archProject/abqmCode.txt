module clock_divider (
    input         clk_in,   // Input clock from an external source
    output reg    clk_out   // Output clock with a frequency of 100 Hz
);

reg [15:0] counter = 0;

always @(posedge clk_in) begin
    if (counter == 49999) begin
        counter <= 0;
        clk_out <= ~clk_out;  // Toggle the output clock
    end else begin
        counter <= counter + 1'b1;
    end
end

endmodule


module clk_div_tb;
  // Declare inputs and outputs
  reg clk;
  reg reset;
  wire CLK100Hz;

  // Instantiate the module being tested
  clock_divider uut (
    .clk(clk),
    .reset(reset),
    .CLK100Hz(CLK100Hz)
  );

  // Generate a 10 MHz clock signal
  reg [31:0] count = 0;
  always #5 clk = count[31];
  always #1 count = count + 1;

  // Reset the divider for the first 50 ns
  initial begin
    reset = 1;
    #50 reset = 0;
  end

  // Verify that the output has a frequency of 100 Hz
  initial begin
    repeat (100000) @(posedge CLK100Hz); // Wait for 1 second
    $display("100 Hz clock test complete");
    
  end
endmodule




module Rom(input clk, input [7:0] address,
           output reg [7:0] data_out);
           
    always @(posedge clk) begin
        case(address)
            8'b00010000: data_out = 8'b00000000;
            8'b00010001: data_out = 8'b00000011;
            8'b00010010: data_out = 8'b00000110;
            8'b00010011: data_out = 8'b00001001;
            8'b00010100: data_out = 8'b00010010;
            8'b00010101: data_out = 8'b00010101;
            8'b00010110: data_out = 8'b00011000;
            8'b00010111: data_out = 8'b00100001;
            8'b00100000: data_out = 8'b00000000;
            8'b00100001: data_out = 8'b00000011;
            8'b00100010: data_out = 8'b00000100;
            8'b00100011: data_out = 8'b00000110;
            8'b00100100: data_out = 8'b00000111;
            8'b00100101: data_out = 8'b00001001;
            8'b00100110: data_out = 8'b00010000;
            8'b00100111: data_out = 8'b00010010;
            8'b00110000: data_out = 8'b00000000;
            8'b00110001: data_out = 8'b00000011;
            8'b00110010: data_out = 8'b00000100;
            8'b00110011: data_out = 8'b00000101;
            8'b00110100: data_out = 8'b00000110;
            8'b00110101: data_out = 8'b00000111;
            8'b00110110: data_out = 8'b00001000;
            8'b00110111: data_out = 8'b00001001;
            default: data_out = 8'b00000000;
        endcase
    end
    
endmodule




module decoder_7seg(
  input clk, input reg[3:0] InputNumber , output [6:0]OutputSegment
);
reg[6:0] outputreg;
always@(posedge clk)
begin
  case(InputNumber)
    0 : outputreg = 7'b1111110;
    1 : outputreg <= 7'b0110000;
    2 : outputreg <= 7'b1101101;
    3 : outputreg <= 7'b1111001;
    4 : outputreg <= 7'b0110011;
    5 : outputreg <= 7'b1011011;
    6 : outputreg <= 7'b1011111;
    7 : outputreg <= 7'b1110000;
    8 : outputreg <= 7'b1111111;
    9 : outputreg <= 7'b1111011;
    default : outputreg <= 7'b1001001;
  endcase
end

assign OutputSegment = outputreg ;
endmodule





module decoder_7seg_tb;
reg[3:0] Number;
wire [6:0] segment;
reg clk;
always #5 clk = ~clk;
decoder_7seg decoder (clk, Number , segment);
initial
begin
  Number = 1 ;
  #10 Number =  2 ;
  #10 Number =  3 ;
  #10 Number =  4 ;
  #10 Number =  5 ;
  #10 Number =  6 ;
  #10 Number =  7 ;
  #10 Number =  8 ;
  #10 Number =  9 ;
end
endmodule









module FSM(clk, reset, pcount, in, out, full, empty);
input clk, reset, in, out;
input [2:0] pcount;
reg [2:0] state;
output reg full, empty;
parameter 	s0 = 3'b000, // Empty
		s1 = 3'b001, // Add
		s2 = 3'b010, // NotFullOrEmpty
		s3 = 3'b011, // Subtract
		s4 = 3'b100; // Full

always @(posedge clk or posedge reset)

begin
if(reset)
begin
state = 0;
empty = 1;
full = 0;
end
else
begin


case(state)
s0: 	//Empty
	if(in == 1 && out == 0) // someone enteres the queue (state goes to addition state)
		begin
			state = s1; // s1 : Add
		end

s1: 	//Additiotn
	if(pcount == 7)  // becomes full after addititon (state goes to full state)
		begin
			state = s4; // s4 : Full
			full = 1;
			empty = 0;
		end
	else 		// isnt full after addition (state goes to not full or empty state)
		begin
			state = s2; // s2 : not full or empty
			full = 0;
			empty = 0;
		end

s2:	//Not Empty OR Full
	if(in == 1 && out == 0) 	// someone enteres the queue (state goes to addition state)
		begin
			state = s1; // s1 : Add
		end
	else if (in == 0 && out == 1)	// someone exits the queue (state goes to subtraction state)
		begin
			state = s3; // s3 : Subtract
		end

s3:	//Subtraction
	if(pcount == 0)  // becomes empty after subtraction (state goes to empty state)
		begin
			state = s0; // s0 : Empty
			full = 0;
			empty = 1;
		end
	else 		// isnt full after addition (state goes to not full or empty state)
		begin
			state = s2; // s2 : not full or empty
			full = 0;
			empty = 0;
		end
s4:	//Full
	if(in == 0 && out == 1)
		begin
			state = s3; // s3 : Subtract
		end
endcase 



end

end


endmodule




module up_down_counter (
  input clk, 
  input reset, 
  input in, 
  input out,
  output reg [2:0] pcount
);

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      pcount <= 3'b000;
    end else if (in && (pcount < 3'b111)) begin
      pcount <= pcount + 1;
    end else if (out && (pcount > 3'b000)) begin
      pcount <= pcount - 1;
    end
  end

endmodule





module Up_DownTB;
  // Inputs
  reg clk = 0;
  reg reset = 1;
  reg in = 0;
  reg out = 0;

  // Outputs
  wire [2:0] pcount;
  
  // Instantiate the DUT
  up_down_counter dut(clk, reset, in, out, pcount);

  // Clock generation
  always #5 clk = ~clk;

  // Initialize inputs and test cases
  initial begin
    reset = 1;
    #10;
    reset = 0;
    #10 in = 0; out = 0; $display("Test case 1: pcount=%b", pcount);
    #10 in = 1; out = 0; #5 $display("Test case 2: pcount=%b", pcount);
    #10 in = 1; out = 0; #5 $display("Test case 3: pcount=%b", pcount);
    #10 in = 0; out = 1; #5 $display("Test case 4: pcount=%b", pcount);
    #10 in = 0; out = 1; #5 $display("Test case 5: pcount=%b", pcount);
    #10 in = 0; out = 1; #5 $display("Test case 6: pcount=%b", pcount);
    #10 in = 0; out = 1; #5 $display("Test case 7: pcount=%b", pcount);
    #10 $finish;
  end

endmodule

module synchronizer(input clk, input button_in, output reg button_out);
  always @(posedge clk) button_out <= button_in;
endmodule



module abqm (
  input clk, 
  input reset, 
  input in, 
  input out,
  input [1:0]tcount,
  output wire Full_flag, 
  output wire Empty_flag,
  output wire [6:0]OutputSegmentRight,
  output wire [6:0]OutputSegmentLeft,
  output wire [6:0]OutputSegmentpcount
);

  
  wire CLK100Hz;
  clock_divider divider(clk,CLK100Hz);
  
  wire [2:0]pcount;
  
  wire sync_button_in;  
  wire sync_button_out;

  synchronizer sync_in (clk, in, sync_button_in);
  synchronizer sync_out (clk, out, sync_button_out);
  
  up_down_counter counter_inst (clk, reset, in, out, pcount);
  
  FSM fsm_inst (
    .clk(clk),
    .reset(reset),
    .in(in),
    .out(out),
    .pcount(pcount),
    .full(Full_flag),
    .empty(Empty_flag)
  );
  wire [3:0] address1;
  wire [3:0] address2;
  assign address1 = {2'b00, tcount};
  assign address2 = {1'b0, pcount};
  wire [7:0] Wait_Time;



  Rom rom_inst(clk, {address1,address2}, Wait_Time);

  
  decoder_7seg segRight(clk,Wait_Time[3:0], OutputSegmentRight);
  decoder_7seg segLeft(clk, Wait_Time[7:4], OutputSegmentLeft);
  decoder_7seg segPcount(clk, address2, OutputSegmentpcount);




endmodule


module abqm_tb;

  reg clk = 0;
  reg reset = 0;
  reg in = 0;
  reg out = 0;
  reg [1:0] tcount = 1;
  
  // Outputs
  wire Full_flag;
  wire Empty_flag;
  wire [6:0] OutputSegmentRight;
  wire [6:0] OutputSegmentLeft;
  wire [6:0] OutputSegmentpcount;

abqm uut (
    .clk(clk),
    .reset(reset),
    .in(in),
    .out(out),
    .tcount(tcount),
    .Full_flag(Full_flag),
    .Empty_flag(Empty_flag),
    .OutputSegmentRight(OutputSegmentRight),
    .OutputSegmentLeft(OutputSegmentLeft),
    .OutputSegmentpcount(OutputSegmentpcount)
  );

always #5 clk = ~clk;
initial
begin
#10 reset = 1;
#10 reset = 0;
#10 in = 1;out = 0; tcount = 1;
#10 in = 1;out = 0; tcount = 1;
#10 in = 1;out = 0; tcount = 1;
#10 in = 1;out = 0; tcount = 1;
#10 in = 1;out = 0; tcount = 1;
#10 in = 1;out = 0; tcount = 1;
#10 in = 1;out = 0; tcount = 1;

#10
#10

#10 in = 0;out = 1; tcount = 1;
#10 in = 0;out = 1; tcount = 1;
#10 in = 0;out = 1; tcount = 1;
#10 in = 0;out = 1; tcount = 1;
#10 in = 0;out = 1; tcount = 1;
end

endmodule

