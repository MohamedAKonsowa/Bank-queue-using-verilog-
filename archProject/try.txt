module Rom(input [7:0] address,
           output reg [7:0] data_out);
           
    always @(*) begin
        case(address)
            8'b00010000: data_out = 8'b00000000;
            8'b00010001: data_out = 8'b00000011;
            8'b00010010: data_out = 8'b00000110;
            8'b00010011: data_out = 8'b00001001;
            8'b00010100: data_out = 8'b00001100;
            8'b00010101: data_out = 8'b00001111;
            8'b00010110: data_out = 8'b00010010;
            8'b00010111: data_out = 8'b00010101;
            8'b00100000: data_out = 8'b00000000;
            8'b00100001: data_out = 8'b00000011;
            8'b00100010: data_out = 8'b00000100;
            8'b00100011: data_out = 8'b00000110;
            8'b00100100: data_out = 8'b00000111;
            8'b00100101: data_out = 8'b00001001;
            8'b00100110: data_out = 8'b00001010;
            8'b00100111: data_out = 8'b00001100;
            8'b00110000: data_out = 8'b00000000;
            8'b00110001: data_out = 8'b00000011;
            8'b00110010: data_out = 8'b00000100;
            8'b00110011: data_out = 8'b00000101;
            8'b00110100: data_out = 8'b00000110;
            8'b00110101: data_out = 8'b00000111;
            8'b00110110: data_out = 8'b00001000;
            8'b00110111: data_out = 8'b00001001;
            default: data_out = 8'b00000000;
        endcase
    end
    
endmodule




module FSM(input reset , Enter_button , Exit_button , reg[2:0] tellers , reg[3:0] PNumber , output reg[2:0] state);

parameter ResetState = 3'b000,
          additionState = 3'b001,
          FullQeue = 2'b10,
          subtractionState = 2'b11,
	  notFullOrEmpty = 100;
initial
begin
state = ResetState;
end

always@ (posedge reset or posedge Enter_button or posedge Exit_button)
begin
case(state)

ResetState: if(Enter_button)
		begin
			state <= additionState;
		end

additionState:	if(reset == 0)
		begin
			state <= ResetState; 	
		end
		else if(PNumber == 7) 
		begin
			state <= FullQeue;
		end
		else
		begin
			state <= notFullOrEmpty;
		end

notFullOrEmpty:	if(reset == 0)
		begin
			state <= ResetState; 	
		end
		else if(Enter_button)
		begin
			state <= additionState;
		end
		else if(Exit_button)
		begin
			state <= subtractionState;
		end

subtractionState:if(reset == 0)
		begin
			state <= ResetState; 	
		end
		else if (PNumber == 0)
		begin
			state <= FullQeue;
		end
		else
		begin
			state <= notFullOrEmpty;
		end

FullQeue:	if(reset == 0)
		begin
			state <= ResetState; 	
		end
		else if(Exit_button)
		begin
			state <= subtractionState;
		end
endcase
end
endmodule


module up_down_counter (
  input reset , up_button , down_button ,
  output wire [3:0]pcount
);

reg [3:0] count;
initial 
begin
  count = 3'b000;
end

always @(posedge reset or posedge up_button or posedge down_button)
begin
  if (reset)
  begin
  count <= 3'b000;
  end
  
  else
  begin
    if (up_button && count < 7 )
    begin
      count = count + 1'b1;
    end
    else if (down_button && count > 0 )
    begin
      assign count = count - 1'b1;
    end
  end

end
assign pcount = count ;
endmodule


module clock_divider (clk,reset,CLK100Hz);

  input clk ,reset;
  output reg CLK100Hz;

  reg [31:0] count;

  always @(posedge clk or posedge reset)
  begin 
    if(reset)
      begin
        count<= 0;
        CLK100Hz<=0;
      end
    else
      begin 
        if(count< 25_000_000_00)
          count<=count+1;
        else
          begin
            CLK100Hz<= ~CLK100Hz;
            count<= 0;
          end
      end
    end

endmodule



module decoder_7seg(
  input reg[3:0] InputNumber , output [6:0]OutputSegment
);
reg[6:0] outputreg;
always@(InputNumber)
begin
  case(InputNumber)
    0 : outputreg = 7'b1111110;
    1 : outputreg <= 7'b0110000;
    2 : outputreg <= 7'b1101101;
    3 : outputreg <= 7'b1111001;
    4 : outputreg <= 7'b0110011;
    5 : outputreg <= 7'b1011011;
    6 : outputreg <= 7'b1011111;
    7 : outputreg <= 7'b1110000;
    8 : outputreg <= 7'b1111111;
    9 : outputreg <= 7'b1111011;
    default : outputreg <= 7'b1001001;
  endcase
end

assign OutputSegment = outputreg ;
endmodule


module waiting_time_address(reg[3:0] tellers , input reg[3:0] pcount,
    output reg[7:0] waitingTimeAddress);
always @(pcount , tellers)
begin
  waitingTimeAddress = tellers&pcount;
end
endmodule

module waiting_time_tb();
  
reg[3:0] pcount;
reg[3:0] tellers;
wire [7:0] address;

waiting_time waitingtime (tellers , pcount , address);

initial
begin
  #10 pcount = 0; tellers =3'b111 ; $display("%b", address);
  
  #10 pcount = 1; tellers =3'b111 ; $display("%b", address);
  
  #10 pcount = 1; tellers =3'b101 ; $display("%b", address);
  
  #10 pcount = 7; tellers =3'b100 ; $display("%b", address);
  
  #10 pcount = 1; tellers =3'b110 ; $display("%b", address);
  
end

endmodule

module Bank_system (
  input Enter_button , Exit_button , clck , reset , reg[2:0]tellers ,
  output wire Full_flag , wire Empty_flag , wire[2:0] tellersLed , wire[6:0] PcountSeg , wire[6:0]waitingTime1 , wire[6:0] waitingTime2
);

wire CLK100Hz;
wire[3:0]pcount ;
wire[2:0] state ;
wire[7:0] address;
wire[7:0] Data;
wire[3:0]segWait1;
wire[3:0]segWait2;

clock_divider divider(clck,reset,CLK100Hz);
up_down_counter pCounter(reset ,Enter_button , Exit_button ,pcount);
decoder_7seg pcountseg(pcount , PcountSeg);
FSM fsm (reset , Enter_button , Exit_button , tellers , pcount ,state);
waiting_time_address waitingtime (tellers , pcount , address);
ROM rom (address ,Data);
data_divider datadivider(Data,segWait1, segWait2);
decoder_7seg wait1( segWait1 , waitingTime1);
decoder_7seg wait2( segWait2 , waitingTime2);

assign tellersLed = tellers ;


parameter ResetState = 3'b000,
          additionState = 3'b001,
          FullQeue = 2'b10,
          subtractionState = 2'b11,
	  notFullOrEmpty = 100;

reg emptyflag;
reg fullflag ;
always @(state)
begin
  if (state == ResetState)
    begin
       emptyflag = 1 ;
       fullflag = 0;
    end
  else if ( state == FullQeue)
    begin
       emptyflag = 0 ;
       fullflag = 1;
    end
  else
    begin
       emptyflag = 0  ;
       fullflag = 0;
     end
end

assign Empty_flag = emptyflag;
assign Full_flag = fullflag;
endmodule





















